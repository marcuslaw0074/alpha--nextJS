import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import {
  fetchData,
  fetchCoPData,
  fetchEnergyData,
  fetchHeatmapData,
} from "./toolAPI";

const initialState = {
  value: 0,
  status: "idle",
  data: [],
  copData: [],
  energyData: [],
};

export const initalDataAsync = createAsyncThunk(
  "tool/fetchData",
  async (amount) => {
    const response = await fetchData();
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const initalHeatmapDataAsync = createAsyncThunk(
  "tool/fetchHeatmapData",
  async ({ host, port, database, query }) => {
    const response = await fetchHeatmapData({ host, port, database, query });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const copDataAsync = createAsyncThunk(
  "tool/fetchCoPData",
  async (measurement) => {
    // console.log(measurement)
    const response = await fetchCoPData({ measurement });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const energyDataAsync = createAsyncThunk(
  "tool/fetchEnergyData",
  async ({ databaseName, queryString }) => {
    console.log(databaseName, queryString);
    const response = await fetchEnergyData({ databaseName, queryString });
    // The value we return becomes the `fulfilled` action payload
    return response;
  }
);

export const initalDataSlice = createSlice({
  name: "tool",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(initalDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(initalDataAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      })
      .addCase(initalHeatmapDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(initalHeatmapDataAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.data = action.payload;
      })
      .addCase(copDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(copDataAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.copData = action.payload;
      })
      .addCase(energyDataAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(energyDataAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.energyData = action.payload;
      });
  },
});

export const { incrementByAmount } = initalDataSlice.actions;

export const selectPartialState = (part) => (state) => {
  return state.tool[part];
};

export default initalDataSlice.reducer;
